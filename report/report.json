{
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-30T10:47:15.389Z",
    "end": "2023-05-30T10:47:23.828Z",
    "duration": 8439,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "154676b4-7768-4f8b-99d1-6089088d18ba",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "45fd930e-ec06-4a4c-92ba-bc3f14cb531b",
          "title": "@get As a User, I want to see Astronomy Picture of the Day",
          "fullFile": "/Users/fatimazza/Belajar/QualityAssurance/SupertestPOM/test/get-apod.test.js",
          "file": "/test/get-apod.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@positive Verify the APOD data is displayed",
              "fullTitle": "@get As a User, I want to see Astronomy Picture of the Day @positive Verify the APOD data is displayed",
              "timedOut": false,
              "duration": 5064,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getApod(payload);\nassert(response.status).to.equal(200);\nexpect(response.body).to.be.jsonSchema(schema.APOD_SCHEMA);",
              "err": {},
              "uuid": "2328e80a-ad95-4fb3-8b2b-4fd79a5ae938",
              "parentUUID": "45fd930e-ec06-4a4c-92ba-bc3f14cb531b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "@negative Ensure data not available when invalid parameter inputted",
              "fullTitle": "@get As a User, I want to see Astronomy Picture of the Day @negative Ensure data not available when invalid parameter inputted",
              "timedOut": false,
              "duration": 2692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "payload.end_date = '2023-db-23';\nconst response = await page.getApod(payload);\nassert(response.status).to.equal(400);\nexpect(response.body).to.haveOwnProperty(\"msg\").that.contains(\"does not match\");",
              "err": {},
              "uuid": "2093ad50-2ef3-4513-9076-30c542a26a11",
              "parentUUID": "45fd930e-ec06-4a4c-92ba-bc3f14cb531b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2328e80a-ad95-4fb3-8b2b-4fd79a5ae938",
            "2093ad50-2ef3-4513-9076-30c542a26a11"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7756,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "07fc8000-d5fb-42af-b327-eb0387566460",
          "title": "@get As a User, I want to see the list of users",
          "fullFile": "/Users/fatimazza/Belajar/QualityAssurance/SupertestPOM/test/get-list-users.test.js",
          "file": "/test/get-list-users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@positive Verify the data of users displayed",
              "fullTitle": "@get As a User, I want to see the list of users @positive Verify the data of users displayed",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.getListUsers(payload);\nassert(response.status).to.equal(200);\nexpect(response.body)\n    .to.be.an(\"object\")\n    .to.include.keys(\"data\", \"support\")\n    .and.to.have.nested.property(\"data\")\n    .that.is.an(\"array\");\nresponse.body.data.forEach((element) => {\n    expect(element)\n        .to.have.all.keys(['id', 'email', 'avatar', 'first_name', 'last_name']);\n});\nexpect(response.body).to.be.jsonSchema(schema.LIST_USERS_SCHEMA);",
              "err": {},
              "uuid": "ae9c78b3-4405-4574-84fe-ff4de3dff08c",
              "parentUUID": "07fc8000-d5fb-42af-b327-eb0387566460",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae9c78b3-4405-4574-84fe-ff4de3dff08c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 144,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "3c534fe5-d7b8-48a2-9f55-652bbe255339",
          "title": "@get As a User, I want to register to Reqres.in",
          "fullFile": "/Users/fatimazza/Belajar/QualityAssurance/SupertestPOM/test/post-register-user.test.js",
          "file": "/test/post-register-user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "@positive Verify new user successfully registered",
              "fullTitle": "@get As a User, I want to register to Reqres.in @positive Verify new user successfully registered",
              "timedOut": false,
              "duration": 523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await page.postRegisterUser(data.REGISTER_USER_DATA);\nassert(response.status).to.equal(200);\nexpect(response.body).to.be.jsonSchema(schema.REGISTER_USER_SCHEMA);",
              "err": {},
              "uuid": "2a7072a8-c88f-49ba-82ad-703f5807a2b9",
              "parentUUID": "3c534fe5-d7b8-48a2-9f55-652bbe255339",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a7072a8-c88f-49ba-82ad-703f5807a2b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 523,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report",
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}